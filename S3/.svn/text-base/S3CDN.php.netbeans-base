<?php

require_once('vendor/sdk.class.php');
require_once('S3CDNException.php');

/**
 * S3CDN
 * 
 * Driver para consumir los servicios de la API de Amazon S3
 * 
 * @package CDN
 * @uses AmazonS3 class
 * @used-by CDNAdapter class
 * @todo throw Exceptions para arriba y que las catchee CDNAdapter
 * @example http://docs.amazonwebservices.com/AWSSDKforPHP/latest/index.html#m=AmazonS3 Documentacion API Amazon S3
 */
class S3CDN {

    private $s3;
    private $bucket = 'gointegro-devel';
    private $acl;
    private $bucketPublicUrl;

    public function __construct($bucket = '') {

        if (!empty($bucket)) {
            $this->setBucket($bucket);
        }
    }

    /**
     * connect
     * 
     * Conectamos con la API de Amazon S3
     * 
     * @uses sdk/config.inc.php
     * @return void
     */
    public function connect() {

        try {
            $this->s3 = new AmazonS3();
        } catch (AuthenticationException $e) {
            $this->logException($e);
            throw $e;
        }
    }

    public function setBucketPublicUrl() {

        $this->bucketPublicUrl = 'http://' . $this->getBucket() . '.s3.amazonaws.com/';
    }

    public function getBucketPublicUrl() {

        return $this->bucketPublicUrl;
    }

    /**
     * setBucket
     * 
     * @param string $bucket
     * @return void
     */
    public function setBucket($bucket) {

        if (!$this->s3->if_bucket_exists($bucket)) {
            $this->bucket = bucket;
        }
    }

    public function getBucket() {

        return $this->bucket;
    }

    public function getBucketList($bucket = '') {

        $response = $this->s3->get_bucket_list($bucket);
        return $response;
    }

    public function createBucket($bucket) {

        try {
            $buckets = $this->s3->getBuckets();

            if (in_array($$bucket, $buckets)) {
                throw new Exception('El bucket ya existe');
            }
            $response = $this->s3->create_bucket($bucket);
            return $response;
        } catch (Exception $e) {
            $this->logException($e);
        }
    }

    public function deleteBucket($bucket) {

        try {
            $response = $this->s3->delete_bucket($bucket);
            return $response;
        } catch (Exception $e) {
            $this->logException($e);
        }
    }

    public function cleanBucket() {

        if (!$this->s3->if_bucket_exists($this->bucket))
            return false;

        $response = $this->s3->delete_all_objects($this->bucket);

        return $response;
    }

    public function getObjectList($prefix = '') {

        try {
            $response = $this->s3->get_object_list($this->bucket, array(
                'prefix' => $prefix
                    )
            );
            return $response;
        } catch (Exception $e) {
            $this->logException($e);
        }
    }

    public function getObject($object) {

        try {
            if ($this->s3->if_object_exists($this->bucket, $object)) {

                $response = $this->s3->get_object($this->bucket, $object);

                if (!$response->isOK()) {
                    throw new ObjectOperationException('No se pudieron obtener los datos del objeto solicitado');
                }
                return $response;
            }
        } catch (ObjectOperationException $e) {
            $this->logException($e);
            throw $e;
        }
    }

    public function getObjectUrl($object) {

        try {
            $response = $this->s3->get_object_url($this->bucket, $object);
            return $response;
        } catch (ObjectOperationException $e) {
            $this->logException($e);
            throw$e;
        }
    }

    public function downloadObject($object) {

        try {
			$filename = substr(strchr($object, '/'), 1); 

			$mimetype = CFMimeTypes::get_mimetype(pathinfo($object, PATHINFO_EXTENSION));
			header("Content-type: " . $mimetype);
			header("Content-Disposition: attachment; filename=" . $filename);
            $response = $this->s3->get_object($this->bucket, $object, array(

            ));

            if (!$response->isOK()) {
                throw new ObjectOperationException('Error al descargar el objecto');
            }
            return $response;
        } catch (ObjectOperationException $e) {
            $this->logException($e);
            throw $e;
        }
    }

    /**
     * createObjectFromData
     * 
     * Crea un objeto en el bucket de Amazon
     * 
     * @param string $object nombre del objeto a almacenar, incluido prefijos por ej. path/subpath/file.png
     * @param string data datos a almacenar dentro del objeto por ej. 'hola  mundo'
     * @return array
     */
    public function createObjectFromData($object, $data, $headers = array(), $meta = array()) {

        try {

            $response = $this->s3->create_object($this->bucket, $object, array(
                'body' => $data,
                'acl' => AmazonS3::ACL_PUBLIC,
                'headers' => $headers,
                'meta' => $meta
                    )
            );

            if (!$response->isOK()) {
                throw new ObjectOperationException('No se pudo crear el objeto');
            }
            return $response;
        } catch (ObjectOperationException $e) {
            $this->logException($e);
            throw $e;
        }
    }

    public function createObjectFromFile($object, $file, $headers = array(), $meta = array()) {

        try {
            $mimetype = CFMimeTypes::get_mimetype(pathinfo($object, PATHINFO_EXTENSION));

            $response = $this->s3->create_object($this->bucket, $object, array(
                'fileUpload' => $file,
                'contentType' => $mimetype,
                'acl' => AmazonS3::ACL_PUBLIC,
                'headers' => $headers,
                'meta' => $meta
                    ));

            if (!$response->isOK()) {
                throw new ObjectOperationException('No se pudo crear el objeto');
            }
            return $response;
        } catch (ObjectOperationException $e) {
            $this->logException($e);
            throw $e;
        }
    }

    /**
     * getObjectDetails
     * 
     * @throws ObjectOperationException
     * @param string $object
     * @return array
     */
    public function getObjectDetails($object) {

        try {
            if (!$this->s3->if_object_exists($this->bucket, $object))
                return false;

            $response = $this->s3->get_object_metadata($this->bucket, $object);

            if (!is_array($response)) {
                throw new ObjectOperationException('No se pudo obtener la informaciÃ³n del objecto');
            }
            return $response;
        } catch (ObjectOperationException $e) {
            $this->logException($e);
            throw $e;
        }
    }

    public function deleteObject($object) {

        try {

            $response = $this->s3->delete_object($this->bucket, $object);

            if (!$response->isOK()) {
                throw new ObjectOperationException('No se pudo eliminar el objeto');
            }
            return $response;
        } catch (ObjectOperationException $e) {
            $this->logException($e);
            throw $e;
        }
    }

    public function __toString() {

        return print_r($this->s3, true);
    }

    /**
     * logException
     * 
     * @todo loguear la excepcion recibida
     * @param type $e Exception
     */
    private function logException($e) {
        
    }

}
